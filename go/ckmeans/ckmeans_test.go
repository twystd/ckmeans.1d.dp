package ckmeans

import (
	"reflect"
	"testing"
)

func TestCKMeansWithNilData(t *testing.T) {
	expected := [][]float64{}
	clusters := CKMeans(nil, nil)

	if !reflect.DeepEqual(clusters, expected) {
		t.Errorf("Expected %v, return, got:%v", expected, clusters)
	}
}

func TestCKMeansWithEmptyData(t *testing.T) {
	expected := [][]float64{}
	clusters := CKMeans([]float64{}, nil)

	if !reflect.DeepEqual(clusters, expected) {
		t.Errorf("Expected %v, return, got:%v", expected, clusters)
	}
}

func TestCKMeansWithInvalidWeights(t *testing.T) {
	defer func() { recover() }()

	CKMeans([]float64{-1, 2, -1, 2, 4, 5, 6, -1, 2, -1}, []float64{0.4, 1.3})

	t.Errorf("Expected panic if weights array did not match data array")
}

func TestCKMeans(t *testing.T) {
	x := []float64{-0.9, 1.0, 1.1, 1.9, 2.0, 2.1}
	w := []float64{3, 1, 2, 2, 1, 1}
	expected := [][]float64{
		{-0.9},
		{1.0, 1.1},
		{1.9, 2.0, 2.1},
	}

	clusters := CKMeans(x, w)

	if !reflect.DeepEqual(clusters, expected) {
		t.Errorf("Returned invalid clusters:\n   expected: %v\n   got:      %v\n", expected, clusters)
	}
}

func TestCKMeansTaps(t *testing.T) {
	x := []float64{
		4.570271991, 5.063594027, 5.603539973, 6.102690998, 6.642708943, 7.141796968, 7.710649857, 8.192470916,
		4.506176116, 5.045971061, 5.591722996, 6.114172975, 6.619153989, 7.135788980, 7.693071891, 8.203885893,
		4.529560070, 5.057670039, 5.591721996, 6.137423930, 6.630941966, 7.176683900, 7.698974880, 8.227207848,
		4.529560070, 5.069284016, 5.603428973, 6.102591998, 6.613455000, 7.147644957, 7.699120880, 8.215609871,
		4.517865093, 5.022782107, 5.580101018, 6.096715009, 6.654118921, 7.176371900, 7.681405914, 8.215537871,
		5.133092891, 5.545395086, 6.067721066, 6.578564068, 7.130096991, 7.652464971, 8.134273030,
		4.494581138, 5.040234073, 5.562732052, 6.079333043, 6.624973977, 7.141650968, 7.664070948, 8.198270905,
		4.529408070, 5.040295073, 5.556940064, 6.131584941, 6.654145921, 7.193876866, 7.722112835, 8.244539814,
		4.523631082, 5.046071061, 5.586102007, 6.090995020, 6.596029034, 7.130224991, 7.652501971, 8.180805939,
		4.517979093, 5.046165061, 5.551068075, 6.073547054, 6.607636011, 7.165018923, 7.687334903, 8.238953825,
		4.517911093, 5.069403016, 5.586174007, 6.108568986, 6.578649068, 7.147523957, 7.681606914, 8.262110780,
	}

	expected := [][]float64{
		{4.570271991, 4.506176116, 4.529560070, 4.529560070, 4.517865093, 4.494581138, 4.529408070, 4.523631082, 4.517979093, 4.517911093},
		{5.063594027, 5.045971061, 5.057670039, 5.069284016, 5.022782107, 5.133092891, 5.040234073, 5.040295073, 5.046071061, 5.046165061, 5.069403016},
		{5.603539973, 5.591722996, 5.591721996, 5.603428973, 5.580101018, 5.545395086, 5.562732052, 5.556940064, 5.586102007, 5.551068075, 5.586174007},
		{6.102690998, 6.114172975, 6.137423930, 6.102591998, 6.096715009, 6.067721066, 6.079333043, 6.131584941, 6.090995020, 6.073547054, 6.108568986},
		{6.642708943, 6.619153989, 6.630941966, 6.613455000, 6.654118921, 6.578564068, 6.624973977, 6.654145921, 6.596029034, 6.607636011, 6.578649068},
		{7.141796968, 7.135788980, 7.176683900, 7.147644957, 7.176371900, 7.130096991, 7.141650968, 7.193876866, 7.130224991, 7.165018923, 7.147523957},
		{7.710649857, 7.693071891, 7.698974880, 7.699120880, 7.681405914, 7.652464971, 7.664070948, 7.722112835, 7.652501971, 7.687334903, 7.681606914},
		{8.192470916, 8.203885893, 8.227207848, 8.215609871, 8.215537871, 8.134273030, 8.198270905, 8.244539814, 8.180805939, 8.238953825, 8.262110780},
	}

	clusters := CKMeans(x, nil)

	for i := range expected {
		for j := range expected[i] {
			if clusters[i][j] != expected[i][j] {
				t.Errorf("Returned invalid entry[%v,%v] - expected:%v, got:%v", i, j, expected[i][j], clusters[i][j])
			}
		}
	}

	if !reflect.DeepEqual(clusters, expected) {
		t.Errorf("Returned invalid clusters:\n   expected: %v\n   got:      %v\n", expected, clusters)
	}
}
